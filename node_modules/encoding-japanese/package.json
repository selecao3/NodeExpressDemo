{
  "_from": "encoding-japanese",
  "_id": "encoding-japanese@1.0.29",
  "_inBundle": false,
  "_integrity": "sha1-9m2xfyr6rfmji2sCJ8DId9LyxbE=",
  "_location": "/encoding-japanese",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "encoding-japanese",
    "fetchSpec": "latest",
    "name": "encoding-japanese",
    "raw": "encoding-japanese",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/encoding-japanese/-/encoding-japanese-1.0.29.tgz",
  "_shasum": "f66db17f2afaadf9a38b6b0227c0c877d2f2c5b1",
  "_shrinkwrap": null,
  "_spec": "encoding-japanese",
  "_where": "C:\\Users\\kazuha\\develop\\Node\\node_demo01",
  "author": {
    "email": "polygon.planet.aqua@gmail.com",
    "name": "polygon planet"
  },
  "bugs": {
    "url": "https://github.com/polygonplanet/encoding.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Converts character encoding",
  "devDependencies": {
    "bannerify": "^1.0.1",
    "browserify": "^16.2.2",
    "mocha": "^5.0.0",
    "power-assert": "^1.4.4",
    "uglify-js": "^3.3.8",
    "uglifyify": "^5.0.0",
    "watchify": "^3.9.0"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/polygonplanet/encoding.js",
  "keywords": [
    "base64",
    "charset",
    "convert",
    "detect",
    "encoding",
    "euc-jp",
    "eucjp",
    "iconv",
    "iso-2022-jp",
    "japanese",
    "jis",
    "shift_jis",
    "sjis",
    "unicode",
    "urldecode",
    "urlencode",
    "utf",
    "utf-16",
    "utf-32",
    "utf-8"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "encoding-japanese",
  "optionalDependencies": {},
  "readme": "encoding.js\n===========\n\n[![Build Status](https://travis-ci.org/polygonplanet/encoding.js.svg?branch=master)](https://travis-ci.org/polygonplanet/encoding.js)\n\nConverts character encoding in JavaScript.  \n\n**[README(Japanese)](https://github.com/polygonplanet/encoding.js/blob/master/README_ja.md)**\n\n### Installation\n\n#### In Browser:\n\n```html\n<script src=\"encoding.js\"></script>\n```\n\nor\n\n```html\n<script src=\"encoding.min.js\"></script>\n```\n\nObject **Encoding** will be defined in the global scope.\n\nConversion and detection for the Array (like Array object).  \n\n#### In Node.js:\n\nencoding.js is published by module name of `encoding-japanese` in npm.\n\n```bash\nnpm install encoding-japanese\n```\n\n```javascript\nvar encoding = require('encoding-japanese');\n```\n\nEach methods are also available for the *Buffer* in Node.js.\n\n#### bower:\n\n```bash\nbower install encoding-japanese\n```\n\n#### CDN\n\nencoding.js is available on [cdnjs.com](https://cdnjs.com/libraries/encoding-japanese).\n\n\n#### Convert character encoding (convert):\n\n* {_Array.&lt;number&gt;|string_} Encoding.**convert** ( data, to\\_encoding [, from\\_encoding ] )  \n  Converts character encoding.  \n  @param {_Array.&lt;number&gt;|TypedArray|Buffer|string_} _data_ The target data.  \n  @param {_(string|Object)_} _to\\_encoding_ The encoding name of conversion destination.  \n  @param {_(string|Array.&lt;string&gt;)=_} [_from\\_encoding_] The encoding name of source or 'AUTO'.  \n  @return {_Array|string_}  Return the converted array/string.\n\n\n```javascript\n// Convert character encoding to Shift_JIS from UTF-8.\nvar utf8Array = new Uint8Array(...) or [...] or Array(...) or Buffer(...);\nvar sjisArray = Encoding.convert(utf8Array, 'SJIS', 'UTF8');\n\n// Convert character encoding by automatic detection (AUTO detect).\nvar sjisArray = Encoding.convert(utf8Array, 'SJIS');\n// or  \nvar sjisArray = Encoding.convert(utf8Array, 'SJIS', 'AUTO');\n\n// Detect the character encoding.\n// The return value be one of the \"Available Encodings\" below.\nvar detected = Encoding.detect(utf8Array);\nif (detected === 'UTF8') {\n  console.log('Encoding is UTF-8');\n}\n```\n\n##### Available Encodings:\n\n* '**UTF32**'   (detect only)\n* '**UTF16**'\n* '**UTF16BE**'\n* '**UTF16LE**'\n* '**BINARY**'  (detect only)\n* '**ASCII**'   (detect only)\n* '**JIS**'\n* '**UTF8**'\n* '**EUCJP**'\n* '**SJIS**'\n* '**UNICODE**' (JavaScript Unicode Array)\n\nNote: UNICODE is an array that has a value of String.charCodeAt() in JavaScript.  \n(Each value in the array possibly has a number greater than 256.)\n\n\n##### Specify the Object argument\n\n```javascript\nvar sjisArray = Encoding.convert(utf8Array, {\n  to: 'SJIS', // to_encoding\n  from: 'UTF8' // from_encoding\n});\n```\n\nReadability improves by passing an object to the second argument.\n\n##### Specify the string argument and 'type' option\n\n```javascript\nvar utf8String = 'ã\\u0081\\u0093ã\\u0082\\u0093ã\\u0081«ã\\u0081¡ã\\u0081¯';\nvar unicodeString = Encoding.convert(utf8String, {\n  to: 'UNICODE',\n  from: 'UTF8',\n  type: 'string' // Specify 'string' type. (Return as string)\n});\nconsole.log(unicodeString); // こんにちは\n```\n\nFollowing '*type*' options are available:\n\n* '**string**': Return as string.\n* '**arraybuffer**': Return as ArrayBuffer.\n* '**array**': Return as Array (default).\n\n\n\n##### Specify BOM in UTF-16\n\nIt's possible to add the UTF16 BOM by specifying the bom option for conversion.\n\n```javascript\nvar utf16Array = Encoding.convert(utf8Array, {\n  to: 'UTF16', // to_encoding\n  from: 'UTF8', // from_encoding\n  bom: true // With BOM\n});\n```\n\nThe byte order of UTF16 is big-endian by default.\n\nSpecify the 'LE' for the bom option if you want to convert as little-endian.  \n\n```javascript\nvar utf16leArray = Encoding.convert(utf8Array, {\n  to: 'UTF16', // to_encoding\n  from: 'UTF8', // from_encoding\n  bom: 'LE' // With BOM (little-endian)\n});\n```\n\nYou can specify UTF16LE or UTF16BE if the BOM is not required.\n\n```javascript\nvar utf16beArray = Encoding.convert(utf8Array, {\n  to: 'UTF16BE',\n  from: 'UTF8'\n});\n```\n\nNote: UTF16, UTF16BE and UTF16LE are not JavaScript internal encodings, they are a byte arrays.\n\n#### Detect character encoding (detect):\n\n* {_string|boolean_} Encoding.**detect** ( data [, encodings ] )  \n  Detect character encoding.  \n  @param {_Array.&lt;number&gt;|TypedArray|string_} _data_ Target data  \n  @param {_(string|Array.&lt;string&gt;)_} [_encodings_] The encoding name that to specify the detection.  \n  @return {_string|boolean_} Return the detected character encoding, or false.\n\n\n```javascript\n// Detect character encoding automatically. (AUTO detect).\nvar detected = Encoding.detect(utf8Array);\nif (detected === 'UTF8') {\n  console.log('Encoding is UTF-8');\n}\n\n// Detect character encoding by specific encoding name.\nvar isSJIS = Encoding.detect(sjisArray, 'SJIS');\nif (isSJIS) {\n  console.log('Encoding is SJIS');\n}\n```\n\n\n##### URL Encode/Decode:\n\n* {_string_} Encoding.**urlEncode** ( data )  \n  URL(percent) encode.  \n  @param {_Array.&lt;number&gt;_|_TypedArray_} _data_ Target data.  \n  @return {_string_}  Return the encoded string.\n\n* {_Array.&lt;number&gt;_} Encoding.**urlDecode** ( string )  \n  URL(percent) decode.  \n  @param {_string_} _string_ Target data.  \n  @return {_Array.&lt;number&gt;_} Return the decoded array.\n\n```javascript\n// URL encode to an array that has character code.\nvar sjisArray = [\n  130, 177, 130, 241, 130, 201, 130, 191, 130, 205, 129,\n  65, 130, 217, 130, 176, 129, 153, 130, 210, 130, 230\n];\n\nvar encoded = Encoding.urlEncode(sjisArray);\nconsole.log(encoded);\n// output:\n// '%82%B1%82%F1%82%C9%82%BF%82%CD%81A%82%D9%82%B0%81%99%82%D2%82%E6'\n\nvar decoded = Encoding.urlDecode(encoded);\nconsole.log(decoded);\n// output: [\n//   130, 177, 130, 241, 130, 201, 130, 191, 130, 205, 129,\n//    65, 130, 217, 130, 176, 129, 153, 130, 210, 130, 230\n// ]\n```\n\n##### Base64 Encode/Decode:\n\n* {_string_} Encoding.**base64Encode** ( data )  \n  Base64 encode.  \n  @param {_Array.&lt;number&gt;_|_TypedArray_} _data_ Target data.  \n  @return {_string_}  Return the Base64 encoded string.\n\n* {_Array.&lt;number&gt;_} Encoding.**base64Decode** ( string )  \n  Base64 decode.  \n  @param {_string_} _string_ Target data.  \n  @return {_Array.&lt;number&gt;_} Return the Base64 decoded array.\n\n\n```javascript\nvar sjisArray = [\n  130, 177, 130, 241, 130, 201, 130, 191, 130, 205\n];\nvar encoded = Encoding.base64Encode(sjisArray);\nconsole.log(encoded); // 'grGC8YLJgr+CzQ=='\n\nvar decoded = Encoding.base64Decode(encoded);\nconsole.log(decoded);\n// [130, 177, 130, 241, 130, 201, 130, 191, 130, 205]\n```\n\n#### Example:\n\n##### Example using the XMLHttpRequest and Typed arrays (Uint8Array):\n\nThis sample reads the text file written in Shift_JIS as binary data,\nand displays a string that is converted to Unicode by Encoding.convert.\n\n```javascript\nvar req = new XMLHttpRequest();\nreq.open('GET', '/my-shift_jis.txt', true);\nreq.responseType = 'arraybuffer';\n\nreq.onload = function (event) {\n  var buffer = req.response;\n  if (buffer) {\n    // Shift_JIS Array\n    var sjisArray = new Uint8Array(buffer);\n\n    // Convert encoding to UNICODE (JavaScript Unicode Array).\n    var unicodeArray = Encoding.convert(sjisArray, {\n      to: 'UNICODE',\n      from: 'SJIS'\n    });\n\n    // Join to string.\n    var unicodeString = Encoding.codeToString(unicodeArray);\n    console.log(unicodeString);\n  }\n};\n\nreq.send(null);\n```\n\n##### Convert encoding for file using the File APIs:\n\nReads file using the File APIs.  \nDetect file encoding and convert to Unicode, and display it.\n\n```html\n<input type=\"file\" id=\"file\">\n<div id=\"encoding\"></div>\n<textarea id=\"result\" rows=\"5\" cols=\"80\"></textarea>\n\n<script>\nfunction onFileSelect(event) {\n  var file = event.target.files[0];\n\n  var reader = new FileReader();\n  reader.onload = function(e) {\n    var codes = new Uint8Array(e.target.result);\n    var encoding = Encoding.detect(codes);\n    document.getElementById('encoding').textContent = encoding;\n\n    // Convert encoding to unicode\n    var unicodeString = Encoding.convert(codes, {\n      to: 'unicode',\n      from: encoding,\n      type: 'string'\n    });\n    document.getElementById('result').value = unicodeString;\n  };\n\n  reader.readAsArrayBuffer(file);\n}\n\ndocument.getElementById('file').addEventListener('change', onFileSelect, false);\n</script>\n```\n\n[**Demo**](http://polygonplanet.github.io/encoding.js/tests/detect-file-encoding.html)\n\n##### Example of the character encoding conversion:\n\n```javascript\nvar eucjpArray = [\n  164, 179, 164, 243, 164, 203, 164, 193, 164, 207, 161,\n  162, 164, 219, 164, 178, 161, 249, 164, 212, 164, 232\n];\n\nvar utf8Array = Encoding.convert(eucjpArray, {\n  to: 'UTF8',\n  from: 'EUCJP'\n});\nconsole.log( utf8Array );\n// output: [\n//   227, 129, 147, 227, 130, 147, 227, 129, 171,\n//   227, 129, 161, 227, 129, 175, 227, 128, 129,\n//   227, 129, 187, 227, 129, 146, 226, 152, 134,\n//   227, 129, 180, 227, 130, 136\n// ]\n//   => 'こんにちは、ほげ☆ぴよ'\n```\n\n##### Example of converting a character code by automatic detection (Auto detect):\n\n```javascript\nvar sjisArray = [\n  130, 177, 130, 241, 130, 201, 130, 191, 130, 205, 129,\n   65, 130, 217, 130, 176, 129, 153, 130, 210, 130, 230\n];\nvar unicodeArray = Encoding.convert(sjisArray, {\n  to: 'UNICODE',\n  from: 'AUTO'\n});\n// codeToString is a utility method that Joins a character code array to string.\nconsole.log( Encoding.codeToString(unicodeArray) );\n// output: 'こんにちは、ほげ☆ぴよ'\n```\n\n### Utilities\n\n* {_string_} Encoding.**codeToString** ( {_Array.&lt;number&gt;_|_TypedArray_} data )  \n  Joins a character code array to string.\n\n* {_Array.&lt;number&gt;_} Encoding.**stringToCode** ( {_string_} string )  \n  Splits string to an array of character codes.\n\n#### Japanese Zenkaku/Hankaku\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toHankakuCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert the ascii symbols and alphanumeric characters to the zenkaku symbols and alphanumeric characters.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toZenkakuCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert to the zenkaku symbols and alphanumeric characters from the ascii symbols and alphanumeric characters.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toHiraganaCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert to the zenkaku hiragana from the zenkaku katakana.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toKatakanaCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert to the zenkaku katakana from the zenkaku hiragana.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toHankanaCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert to the hankaku katakana from the zenkaku katakana.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toZenkanaCase** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert to the zenkaku katakana from the hankaku katakana.\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toHankakuSpace** ({_Array.&lt;number&gt;|string_} data )  \n  Convert the em space(U+3000) to the single space(U+0020).\n\n* {_Array.&lt;number&gt;|string_} Encoding.**toZenkakuSpace** ( {_Array.&lt;number&gt;|string_} data )  \n  Convert the single space(U+0020) to the em space(U+3000).\n\n\n### Demo\n\n* [Test for character encoding conversion (Demo)](http://polygonplanet.github.io/encoding.js/tests/encoding-test.html)\n* [Detect and Convert encoding from file (Demo)](http://polygonplanet.github.io/encoding.js/tests/detect-file-encoding.html)\n\n### Contributing\n\nWe're waiting for your pull requests and issues.\nDon't forget to execute `npm run test` before requesting.\nAccepted only requests without errors.\n\n### License\n\nMIT\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/polygonplanet/encoding.js.git"
  },
  "scripts": {
    "build": "npm run compile && npm run minify",
    "compile": "browserify src/index.js -o encoding.js -s Encoding -p [ bannerify --file src/banner.js ] --no-bundle-external --bare",
    "minify": "uglifyjs encoding.js -o encoding.min.js --source-map \"url='encoding.min.js.map'\" --comments -c warnings=false -m -b ascii_only=true,beautify=false",
    "test": "npm run build && mocha tests/test",
    "watch": "watchify src/index.js -o encoding.js -s Encoding -p [ bannerify --file src/banner.js ] --no-bundle-external --bare --poll=200 -v"
  },
  "version": "1.0.29"
}
